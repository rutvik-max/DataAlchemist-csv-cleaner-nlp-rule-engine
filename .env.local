import type { NextApiRequest, NextApiResponse } from "next";

/**
 * Fake NLP parser: turns plain English rule into structured rule JSON.
 * No API key, no OpenAI required.
 */

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== "POST")
    return res.status(405).json({ error: "Only POST allowed" });

  const { text } = req.body;
  const lower = text.toLowerCase();

  // Rule type guessing
  let type: "no-collab" | "must-follow" | "skill-match" = "no-collab";

  if (lower.includes("must follow") || lower.includes("before")) {
    type = "must-follow";
  } else if (lower.includes("match") || lower.includes("only")) {
    type = "skill-match";
  }

  // Simple name/entity detection
  const parts = text
    .split(/with|before|and|between|vs/i)
    .map((p) => p.trim())
    .filter(Boolean);

  const [entity1 = "Task A", entity2 = "Task B"] = parts;

  // Priority detection
  const weightMatch = lower.match(/priority\s*(\d+)/);
  const weight = weightMatch ? parseInt(weightMatch[1], 10) : 5;

  return res.status(200).json({ type, entity1, entity2, weight });
}
